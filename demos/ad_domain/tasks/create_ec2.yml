---
- name: Assert required parameters
  ansible.builtin.assert:
    that:
      - ec2_vpc_name
      - ec2_subnet_name is defined
      - ec2_security_group_name is defined
      - ec2_key_pair_name is defined
      - ec2_instance_name is defined

- name: Get AMI info
  register: r_ami_info
  amazon.aws.ec2_ami_info:
    region: "{{ aws_region }}"
    owners: "{{ aws_image_owners | default(omit) }}"
    filters:
      name: "{{ ec2_ami_filter }}"
      architecture: "{{ ec2_ami_architecture | default(omit) }}"

- name: Extract AMI id
  ansible.builtin.set_fact:
    ec2_ami_id: "{{ (r_ami_info.images | selectattr('name', 'defined') | sort(attribute='creation_date'))[-2] }}"

- name: Get VPC id
  register: r_vpc_info
  amazon.aws.ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ ec2_vpc_name }}"

- name: Get subnet id
  register: r_vpc_subnet_info
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "vpc-id": "{{ r_vpc_info['vpcs'][0]['id'] }}"
      "tag:Name": "{{ ec2_subnet_name }}"

- name: Launch EC2 Instance
  register: r_ec2
  amazon.aws.ec2_instance:
    region: "{{ aws_region }}"
    image_id: "{{ ec2_ami_id.image_id }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_key_pair_name }}"
    security_group: "{{ ec2_security_group_name }}"
    vpc_subnet_id: "{{ r_vpc_subnet_info['subnets'][0]['id'] }}"
    network:
      assign_public_ip: "{{ ec2_assign_public_ip }}"
    user_data: "{{ lookup('template', ec2_userdata_tmpl + '.j2') }}"
    tags: "{{ ec2_instance_tags_default | combine(ec2_instance_tags) }}"
    wait: "{{ ec2_wait }}"
    count: "{{ ec2_count }}"

- name: List all EIP addresses
  register: r_eips
  amazon.aws.ec2_eip_info:
    filters:
      "tag:Name": dc01.autodotes.com

- name: Allocate a new EIP and associate
  when: not r_eips.addresses | length
  amazon.aws.ec2_eip:
    device_id: "{{ r_ec2.instances[0].instance_id }}"
    tags:
      Name: "{{ ec2_instance_name }}"


- name: Associate existing EIP
  when: r_eips.addresses | length
  amazon.aws.ec2_eip:
    device_id: "{{ r_ec2.instances[0].instance_id }}"
    ip: "{{ r_eips.addresses[0].public_ip }}"